<!doctype html>
<html lang="en">
  <!-- values render from BE route-->
  <input type="hidden" name="game-id" id="game-id" value="<%= gameId %>" />

  <input
    type="hidden"
    name="current-user-id"
    id="current-user-id"
    value="<%= user.id %>"
  />
  <input
    type="hidden"
    name="current-user-name"
    id="current-user-name"
    value="<%= user.username %>"
  />

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>UNO Game</title>
    <link rel="stylesheet" href="/dist/style.css" />
    <script src="/dist/index.js" defer></script>
    <%- include("./layout/favicons") %>
  </head>

  <body>
    <%- include("./layout/nav-bar") %>
    <div class="container mx-auto px-4">
      <div class="flex">
        <!-- UNO Game Interface -->
        <div class="w-full border border-red-500 p-4">
          <h2 class="text-lg font-bold mb-4 text-red-500">UNO GAME</h2>
          <div id="cardContainer" class="flex flex-wrap justify-center">
            <!-- Card images will be dynamically loaded here -->
          </div>
          <div class="flex justify-center mt-4">
            <button
              class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2"
              id="startGameButton"
            >
              Start Game
            </button>
            <button
              class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
              id="resetGameButton"
            >
              Reset Game
            </button>
          </div>
        </div>

        <!-- Leaderboard and Controls -->
        <div class="w-1/3 border border-red-500 p-4" id="lobbyContainer">
          <div class="leaderboard bg-gray-200 p-4 rounded">
            <h3 class="text-lg font-bold mb-2">LEADERBOARD INTERFACE</h3>
            <p class="text-base mb-2">STATUS - PLAY</p>
            <button
              class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded mr-2"
              id="abandonButton"
            >
              Abandon
            </button>
            <button
              class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
              id="drawButton"
            >
              Draw
            </button>
            <button
              class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
              id="sayUnoButton"
            >
              SAY UNO!
            </button>
          </div>
        </div>

        <!-- Chat Box Container -->
        <div class="w-1/3 border border-blue-500 p-4">
          <h2 class="text-lg font-bold mb-4">CHAT BOX CONTAINER</h2>
          <!-- Chat box content will be dynamically loaded here -->
        </div>
      </div>
    </div>

    <script>
      // define variables to store game state
      let gameId = "<%= gameId %>";
      let userId = "<%= user.id %>";
      let userName = "<%= user.username %>";
      let playerDeck = []; // assuming playerDeck is an array containing the player's cards
      let drawCardPile = []; // assuming drawCardPile is an array containing the draw pile
      let playedCardsPile = []; // assuming playedCardsPile is an array containing the played cards
      let currentColor = ""; // current color of the game
      let currentNumber = ""; // current number of the game

      const cardImages = [
        "static/cards/Back.png",
        "static/cards/Blue_0.png",
        "static/cards/Blue_1.png",
        "static/cards/Blue_2.png",
        "static/cards/Blue_3.png",
        "static/cards/Blue_4.png",
        "static/cards/Blue_5.png",
        "static/cards/Blue_6.png",
        "static/cards/Blue_7.png",
        "static/cards/Blue_8.png",
        "static/cards/Blue_9.png",
        "static/cards/Blue_Draw.png",
        "static/cards/Blue_Reverse.png",
        "static/cards/Blue_Skip.png",
        "static/cards/Red_0.png",
        "static/cards/Red_1.png",
        "static/cards/Red_2.png",
        "static/cards/Red_3.png",
        "static/cards/Red_4.png",
        "static/cards/Red_5.png",
        "static/cards/Red_6.png",
        "static/cards/Red_7.png",
        "static/cards/Red_8.png",
        "static/cards/Red_9.png",
        "static/cards/Red_Draw.png",
        "static/cards/Red_Reverse.png",
        "static/cards/Red_Skip.png",
        "static/cards/Green_0.png",
        "static/cards/Green_1.png",
        "static/cards/Green_2.png",
        "static/cards/Green_3.png",
        "static/cards/Green_4.png",
        "static/cards/Green_5.png",
        "static/cards/Green_6.png",
        "static/cards/Green_7.png",
        "static/cards/Green_8.png",
        "static/cards/Green_9.png",
        "static/cards/Green_Draw.png",
        "static/cards/Green_Reverse.png",
        "static/cards/Green_Skip.png",
        "static/cards/Yellow_0.png",
        "static/cards/Yellow_1.png",
        "static/cards/Yellow_2.png",
        "static/cards/Yellow_3.png",
        "static/cards/Yellow_4.png",
        "static/cards/Yellow_5.png",
        "static/cards/Yellow_6.png",
        "static/cards/Yellow_7.png",
        "static/cards/Yellow_8.png",
        "static/cards/Yellow_9.png",
        "static/cards/Yellow_Draw.png",
        "static/cards/Yellow_Reverse.png",
        "static/cards/Yellow_Skip.png",
        "static/cards/Wild.png",
        "static/cards/Wild_Draw.png",
      ];

      // function to shuffle an array
      function shuffleArray(array) {
        console.log("[unogame.ejs] Shuffling the array...");
        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
      }
      // function to initialize UNO game interface
      function initializeUNOGame() {
        // get references to HTML elements
        const unoGameInterface = document.getElementById("unoGameInterface");

        // load card images onto the interface
        loadCardImages();

        // create and append game elements to the interface
        const gameElements = `
        <!-- UNO Game Interface -->
          <div class="w-full border border-red-500 p-4">
            <h2 class="text-lg font-bold mb-4 text-red-500">UNO GAME</h2>
            <div id="cardContainer" class="flex flex-wrap justify-center">
              <!-- Card images will be dynamically loaded here -->
            </div>
            <div class="flex justify-center mt-4">
              <button
                class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2"
                id="startGameButton"
              >
                Start Game
              </button>
              <button
                class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
                id="resetGameButton"
              >
                Reset Game
              </button>
            </div>
          </div>
        `;
        unoGameInterface.innerHTML = gameElements;

        // add event listeners for game controls
        const drawButton = document.getElementById("drawButton");
        drawButton.addEventListener("click", drawCard);
        const abandonButton = document.getElementById("abandonButton");
        abandonButton.addEventListener("click", abandonGame);
        const sayUnoButton = document.getElementById("sayUnoButton");
        sayUnoButton.addEventListener("click", sayUno);
      }

      // Function to dynamically load card images onto the interface
      function loadCardImages() {
        const cardContainer = document.getElementById("cardContainer");
        cardImages.forEach((imageName, index) => {
          const cardImage = document.createElement("img");
          cardImage.src = imageName;
          cardImage.alt = "Card " + (index + 1);
          cardImage.classList.add("w-16", "h-24", "m-2");
          cardContainer.appendChild(cardImage);
        });
      }

      // unction to start the game
      function startGame() {
        console.log("[unogame.ejs] Game started!");

        // draw 7 cards for the first player
        for (let i = 0; i < 7; i++) {
          const cardDrawn = drawCardFromPile(); // Draw a card from the draw pile
          playerDeck.push(cardDrawn); // Add the card to the player's deck
        }

        // draw 7 cards for the second player
        for (let i = 0; i < 7; i++) {
          const cardDrawn = drawCardFromPile(); // Draw a card from the draw pile
          // Assuming player 2's deck is stored in another array named playerDeck2
          playerDeck2.push(cardDrawn); // Add the card to the second player's deck
        }

        // display the player's decks and the draw pile
        updateGameInterface();
      }

      // function to reset the game
      function resetGame() {
        console.log("[unogame.ejs] Game reset!");
        // Add your game reset logic here
      }

      // Function to draw a card from the draw pile
      function drawCardFromPile() {
        if (drawCardPile.length > 0) {
          console.log("[unogame.ejs] Drawing a card from the draw pile...");
          return drawCardPile.pop(); // remove and return the top card from the draw pile
        } else {
          console.log("[unogame.ejs] No cards left in the draw pile!");
          return null; // return null if there are no cards left in the draw pile
        }
      }

      // function to handle abandoning the game
      function abandonGame() {
        // prompt user for confirmation
        const confirmation = confirm(
          "Are you sure you want to abandon the game?"
        );

        // if user confirms, perform abandonment actions
        if (confirmation) {
          console.log(
            "[unogame.ejs] Abandon button clicked. Abandoning the game..."
          );
          // add abandonment logic here
        } else {
          console.log("[unogame.ejs] Abandonment canceled.");
        }
      }

      // function to handle saying UNO
      function sayUno() {
        // check if the player has only one card left
        if (playerDeck.length === 1) {
          console.log(
            "[unogame.ejs] SAY UNO! button clicked. Announcing UNO..."
          );
          // set a flag indicating that UNO has been said
          isUnoButtonPressed = true;
          // ? further logic here, such as informing the server
        } else {
          console.log(
            "[unogame.ejs] You can only say UNO when you have one card left in your deck."
          );
          // ? display a message to the user indicating they cannot say UNO yet
        }
      }

      // function to update game interface after drawing card
      function updateGameInterface() {
        // Display player's decks and the draw pile
        const unoGameInterface = document.getElementById("unoGameInterface");
        unoGameInterface.innerHTML = `
        <div>
          <p>Game Status: In Progress</p>
          <p>Current Color: ${currentColor}</p>
          <p>Current Number: ${currentNumber}</p>
          <div class="flex justify-between">
            <div>
              <p>Player Deck:</p>
              ${getPlayerDeckHTML(playerDeck)} <!-- Display player 1's deck -->
            </div>
            <div>
              <p>Draw Pile:</p>
              ${getDrawPileHTML()} <!-- Display the draw pile -->
            </div>
            <div>
              <p>Player 2 Deck:</p>
              ${getPlayerDeckHTML(playerDeck2)} <!-- Display player 2's deck -->
            </div>
          </div>
        </div>
  `;
      }

      // call initialize function when the page loads
      window.addEventListener("load", initializeUNOGame);
      console.log("[unogame.ejs] Page loaded. Initializing UNO game...");
    </script>
  </body>
</html>
